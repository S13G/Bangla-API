#
# class MatrimonialProfileSerializer(serializers.Serializer):
#     full_name = serializers.CharField(source="profile.full_name")
#     email = serializers.EmailField(source="profile.email")
#     _avatar = serializers.ImageField(validators=[FileExtensionValidator(['jpg', 'jpeg', 'png'])])
#     gender = serializers.ChoiceField(choices=GENDER_CHOICES)
#     caste = serializers.CharField()
#     country = CountryField()
#     phone_number = serializers.CharField(max_length=20)
#
#     def validate__avatar(self, attrs):
#         avatar = attrs.get('_avatar')
#         max_size = 5 * 1024 * 1024  # 3MB in bytes
#         if avatar.size > max_size:
#             raise ValidationError({"message": f"Image {avatar} size should be less than 5MB", "status": "failed"})
#         return attrs
#
#     def validate_phone_number(self, value):
#         phone_number = value
#         if not phone_number.startswith('+'):
#             raise ValidationError({"message": "Phone number must start with a plus sign (+)", "status": "failed"})
#         if not phone_number[1:].isdigit():
#             raise ValidationError(
#                     {"message": "Phone number must only contain digits after the plus sign (+)", "status": "failed"})
#         return value
